import { AxiosResponse } from 'axios'
import { GetServerSideProps } from 'next'
import Head from 'next/head'
import { fetchArticles, fetchCategories } from '../apiTransactions'
import ArticleList from '../components/ArticleList'
import Tabs from '../components/Tabs'
import { IArticle, ICategory, ICollectionResponse, IPagination, IQueryOptions } from '../types';
import qs from 'qs';
import Pagination from '../components/Pagination'
import { useRouter } from 'next/router'
import { debounce } from '../utils'

interface IPropTypes
{
  categories: {
    items: ICategory[];
  };
  articles: {
    items: IArticle[];
    pagination: IPagination;
  }
}

export default function Home({categories, articles}: IPropTypes)
{

  const {page, pageCount} = articles.pagination;
  const router = useRouter();

  const handleSearch = (query: string) => {

    router.push(`/?search=${query}`);
  }

  return (
    <div>
      <Head>
        <title>Coders Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.svg" />
      </Head>


      <Tabs categories={categories.items} handleOnSearch={debounce(handleSearch, 600)} />
      <ArticleList articles={articles.items} />
      <Pagination page={page} pageCount={pageCount} />

    </div>
  )
}

export const getServerSideProps:GetServerSideProps = async ({query}) => {

  //* categories to be fetched and passed to the component
  const {data: categories}: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories();

  //* articles to be fetched and passed to the component
  let options: Partial<IQueryOptions> = {
    populate: ['author.avatar'],
    sort: ['id:desc'],
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 1
    }
  };

  if(query.search)
  {
    options.filters = {
      Title: {
        $containsi: query.search
      }
    }
  }

  const queryString = qs.stringify(options);
  const {data: articles}: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString);

  return {
    props: {
      categories: {
        items: categories.data
      },
      articles:{
        items: articles.data,
        pagination: articles.meta.pagination,
      }
    }
  }
}
