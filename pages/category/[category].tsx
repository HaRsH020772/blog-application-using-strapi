import { AxiosResponse } from 'axios';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import qs from 'qs';
import React from 'react';
import { fetchArticles, fetchCategories } from '../../apiTransactions';
import ArticleList from '../../components/ArticleList';
import Pagination from '../../components/Pagination';
import Tabs from '../../components/Tabs';
import { ICollectionResponse, ICategory, IPagination, IArticle, IQueryOptions } from '../../types';
import { debounce } from '../../utils';

interface IPropTypes
{
  categories: {
    items: ICategory[];
    pagination: IPagination;
  };
  articles: {
    items: IArticle[];
    pagination: IPagination;
  };
  slug:string;
}

const Category = ({categories, articles, slug}: IPropTypes) => {

  const formattedCategory = ():string =>  slug.split('-').join(" ");
  const {page, pageCount} = articles.pagination;

  const router = useRouter();
  const {category} = router.query;

  const handleSearch = (query: string) => {
    router.push(`/category/${category}/?search=${query}`);
  }
  
  return (
    <>

      <Head>
        <title>Coders {formattedCategory() ? formattedCategory() : "" } Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.svg" />
      </Head>

      <Tabs categories={categories.items} handleOnSearch={debounce(handleSearch, 600)}/>
      <ArticleList articles={articles.items} />
      <Pagination page={page} pageCount={pageCount} redirectUrl={`/category/${category}`} />

    </>
  )
}

export default Category;

export const getServerSideProps:GetServerSideProps = async ({query}) => {

  //* categories to be fetched and passed to the component
  const {data: categories}: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories();

  //* Fetching the articles according to the slugs
  const options: Partial<IQueryOptions> = {
    populate: ['author.avatar'],
    sort: ['id:desc'],
    filters:{
      category:{
        slug:query.category,
      }
    },
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 1
    }
  };

  if(query.search)
  {
    options.filters = {
      Title: {
        $containsi: query.search
      }
    }
  }

  const queryString = qs.stringify(options);

  const {data: articles}: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString);

  return {
    props: {
      categories: {
        items: categories.data,
        pagination: categories.meta.pagination
      },
      articles:{
        items:articles.data,
        pagination: articles.meta.pagination
      },
      slug:query.category
    }
  }
}